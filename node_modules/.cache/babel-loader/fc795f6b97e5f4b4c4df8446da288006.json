{"ast":null,"code":"// https://github.com/Fil/versor v0.1.2 Copyright 2020 Mike Bostock\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.versor = factory());\n})(this, function () {\n  'use strict';\n\n  var acos = Math.acos,\n      asin = Math.asin,\n      atan2 = Math.atan2,\n      cos = Math.cos,\n      hypot = Math.hypot,\n      max = Math.max,\n      min = Math.min,\n      PI = Math.PI,\n      sin = Math.sin,\n      radians = PI / 180,\n      degrees = 180 / PI;\n\n  class Versor {\n    static fromCartesian([x, y, z]) {\n      return [0, z, -y, x];\n    }\n\n    static fromAngles([l, p, g]) {\n      l *= radians / 2;\n      p *= radians / 2;\n      g = (g || 0) * radians / 2;\n      const sl = sin(l),\n            cl = cos(l);\n      const sp = sin(p),\n            cp = cos(p);\n      const sg = sin(g),\n            cg = cos(g);\n      return [cl * cp * cg + sl * sp * sg, sl * cp * cg - cl * sp * sg, cl * sp * cg + sl * cp * sg, cl * cp * sg - sl * sp * cg];\n    }\n\n    static toAngles([a, b, c, d]) {\n      return [atan2(2 * (a * b + c * d), 1 - 2 * (b * b + c * c)) * degrees, asin(max(-1, min(1, 2 * (a * c - d * b)))) * degrees, atan2(2 * (a * d + b * c), 1 - 2 * (c * c + d * d)) * degrees];\n    }\n\n    static interpolateAngles(a, b) {\n      const i = Versor.interpolate(Versor.fromAngles(a), Versor.fromAngles(b));\n      return t => Versor.toAngles(i(t));\n    }\n\n    static interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n      a2 -= a1, b2 -= b1, c2 -= c1, d2 -= d1;\n      const x = new Array(4);\n      return t => {\n        const l = hypot(x[0] = a1 + a2 * t, x[1] = b1 + b2 * t, x[2] = c1 + c2 * t, x[3] = d1 + d2 * t);\n        x[0] /= l, x[1] /= l, x[2] /= l, x[3] /= l;\n        return x;\n      };\n    }\n\n    static interpolate([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n      let dot = Versor.dot([a1, b1, c1, d1], [a2, b2, c2, d2]);\n      if (dot < 0) a2 = -a2, b2 = -b2, c2 = -c2, d2 = -d2, dot = -dot;\n      if (dot > 0.9995) return Versor.interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]);\n      const theta0 = acos(max(-1, min(1, dot)));\n      const x = new Array(4);\n      const l = hypot(a2 -= a1 * dot, b2 -= b1 * dot, c2 -= c1 * dot, d2 -= d1 * dot);\n      a2 /= l, b2 /= l, c2 /= l, d2 /= l;\n      return t => {\n        const theta = theta0 * t;\n        const s = sin(theta);\n        const c = cos(theta);\n        x[0] = a1 * c + a2 * s;\n        x[1] = b1 * c + b2 * s;\n        x[2] = c1 * c + c2 * s;\n        x[3] = d1 * c + d2 * s;\n        return x;\n      };\n    }\n\n    static dot([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n      return a1 * a2 + b1 * b2 + c1 * c2 + d1 * d2;\n    }\n\n    static multiply([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n      return [a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2, a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2, a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2, a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2];\n    }\n\n  }\n  /*\n   * Old API\n   */\n  // Returns the unit quaternion for the given Euler rotation angles [λ, φ, γ].\n\n\n  var versor = Versor.fromAngles; // Returns the quaternion that represents q0 * q1.\n\n  versor.multiply = Versor.multiply; // Returns the Euler rotation angles [λ, φ, γ] for the given quaternion.\n\n  versor.rotation = Versor.toAngles; // interpolate angles\n\n  versor.interpolate = Versor.interpolateAngles; // Returns Cartesian coordinates [x, y, z] given spherical coordinates [λ, φ].\n\n  versor.cartesian = function (e) {\n    var l = e[0] * radians,\n        p = e[1] * radians,\n        cp = cos(p);\n    return [cp * cos(l), cp * sin(l), sin(p)];\n  }; // Returns the quaternion to rotate between two cartesian points on the sphere.\n  // alpha for tweening [0,1]\n  // see https://github.com/Fil/versor/issues/8\n\n\n  versor.delta = function (v0, v1, alpha) {\n    if (arguments.length == 2) alpha = 1;\n    const sqrt = Math.sqrt;\n\n    function cross(v0, v1) {\n      return [v0[1] * v1[2] - v0[2] * v1[1], v0[2] * v1[0] - v0[0] * v1[2], v0[0] * v1[1] - v0[1] * v1[0]];\n    }\n\n    function dot(v0, v1) {\n      return v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2];\n    }\n\n    var w = cross(v0, v1),\n        l = sqrt(dot(w, w));\n    if (!l) return [1, 0, 0, 0];\n    var t = alpha * acos(max(-1, min(1, dot(v0, v1)))) / 2,\n        s = sin(t); // t = θ / 2\n\n    return [cos(t), w[2] / l * s, -w[1] / l * s, w[0] / l * s];\n  };\n\n  return versor;\n});","map":{"version":3,"sources":["/home/rmehta/astrosat/Astrosat-Webapp/node_modules/versor/dist/versor.js"],"names":["global","factory","exports","module","define","amd","self","versor","acos","Math","asin","atan2","cos","hypot","max","min","PI","sin","radians","degrees","Versor","fromCartesian","x","y","z","fromAngles","l","p","g","sl","cl","sp","cp","sg","cg","toAngles","a","b","c","d","interpolateAngles","i","interpolate","t","interpolateLinear","a1","b1","c1","d1","a2","b2","c2","d2","Array","dot","theta0","theta","s","multiply","rotation","cartesian","e","delta","v0","v1","alpha","arguments","length","sqrt","cross","w"],"mappings":"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","sourcesContent":["// https://github.com/Fil/versor v0.1.2 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = global || self, global.versor = factory());\n}(this, (function () { 'use strict';\n\nvar acos = Math.acos,\n    asin = Math.asin,\n    atan2 = Math.atan2,\n    cos = Math.cos,\n    hypot = Math.hypot,\n    max = Math.max,\n    min = Math.min,\n    PI = Math.PI,\n    sin = Math.sin,\n    radians = PI / 180,\n    degrees = 180 / PI;\n\nclass Versor {\n  static fromCartesian([x, y, z]) {\n    return [0, z, -y, x];\n  }\n  static fromAngles([l, p, g]) {\n    l *= radians / 2;\n    p *= radians / 2;\n    g = (g||0) * radians / 2;\n    const sl = sin(l), cl = cos(l);\n    const sp = sin(p), cp = cos(p);\n    const sg = sin(g), cg = cos(g);\n    return [\n      cl * cp * cg + sl * sp * sg,\n      sl * cp * cg - cl * sp * sg,\n      cl * sp * cg + sl * cp * sg,\n      cl * cp * sg - sl * sp * cg\n    ];\n  }\n  static toAngles([a, b, c, d]) {\n    return [\n      atan2(2 * (a * b + c * d), 1 - 2 * (b * b + c * c)) * degrees,\n      asin(max(-1, min(1, 2 * (a * c - d * b)))) * degrees,\n      atan2(2 * (a * d + b * c), 1 - 2 * (c * c + d * d)) * degrees\n    ];\n  }\n  static interpolateAngles(a, b) {\n    const i = Versor.interpolate(Versor.fromAngles(a), Versor.fromAngles(b));\n    return t => Versor.toAngles(i(t));\n  }\n  static interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    a2 -= a1, b2 -= b1, c2 -= c1, d2 -= d1;\n    const x = new Array(4);\n    return t => {\n      const l = hypot(x[0] = a1 + a2 * t, x[1] = b1 + b2 * t, x[2] = c1 + c2 * t, x[3] = d1 + d2 * t);\n      x[0] /= l, x[1] /= l, x[2] /= l, x[3] /= l;\n      return x;\n    };\n  }\n  static interpolate([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    let dot = Versor.dot([a1, b1, c1, d1], [a2, b2, c2, d2]);\n    if (dot < 0) a2 = -a2, b2 = -b2, c2 = -c2, d2 = -d2, dot = -dot;\n    if (dot > 0.9995) return Versor.interpolateLinear([a1, b1, c1, d1], [a2, b2, c2, d2]); \n    const theta0 = acos(max(-1, min(1, dot)));\n    const x = new Array(4);\n    const l = hypot(a2 -= a1 * dot, b2 -= b1 * dot, c2 -= c1 * dot, d2 -= d1 * dot);\n    a2 /= l, b2 /= l, c2 /= l, d2 /= l;\n    return t => {\n      const theta = theta0 * t;\n      const s = sin(theta);\n      const c = cos(theta);\n      x[0] = a1 * c + a2 * s;\n      x[1] = b1 * c + b2 * s;\n      x[2] = c1 * c + c2 * s;\n      x[3] = d1 * c + d2 * s;\n      return x;\n    };\n  }\n  static dot([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return a1 * a2 + b1 * b2 + c1 * c2 + d1 * d2;\n  }\n  static multiply([a1, b1, c1, d1], [a2, b2, c2, d2]) {\n    return [\n      a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2,\n      a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2,\n      a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2,\n      a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2\n    ];\n  }\n}\n\n/*\n * Old API\n */\n\n// Returns the unit quaternion for the given Euler rotation angles [λ, φ, γ].\nvar versor = Versor.fromAngles;\n\n// Returns the quaternion that represents q0 * q1.\nversor.multiply = Versor.multiply;\n\n// Returns the Euler rotation angles [λ, φ, γ] for the given quaternion.\nversor.rotation = Versor.toAngles;\n\n// interpolate angles\nversor.interpolate = Versor.interpolateAngles;\n\n// Returns Cartesian coordinates [x, y, z] given spherical coordinates [λ, φ].\nversor.cartesian = function(e) {\n  var l = e[0] * radians, p = e[1] * radians, cp = cos(p);\n  return [cp * cos(l), cp * sin(l), sin(p)];\n};\n\n// Returns the quaternion to rotate between two cartesian points on the sphere.\n// alpha for tweening [0,1]\n// see https://github.com/Fil/versor/issues/8\nversor.delta = function(v0, v1, alpha) {\n  if (arguments.length == 2) alpha = 1;\n\n  const sqrt = Math.sqrt;\n  function cross(v0, v1) {\n    return  [v0[1] * v1[2] - v0[2] * v1[1], v0[2] * v1[0] - v0[0] * v1[2], v0[0] * v1[1] - v0[1] * v1[0]];\n  }\n  function dot(v0, v1) {\n    return v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2];\n  }\n\n  var w = cross(v0, v1), l = sqrt(dot(w, w));\n  if (!l) return [1, 0, 0, 0];\n  var t = alpha * acos(max(-1, min(1, dot(v0, v1)))) / 2, s = sin(t); // t = θ / 2\n  return [cos(t), w[2] / l * s, -w[1] / l * s, w[0] / l * s];\n};\n\nreturn versor;\n\n})));\n"]},"metadata":{},"sourceType":"script"}